<?xml version="1.0" encoding="UTF-8"?>
<project name="mkv-scanner" basedir="." default="create-jar.runtime"
         xmlns:ivy="antlib:org.apache.ivy.ant">

    <property name="ivy.install.version"       value="2.4.0"/>
    <property name="ivy.jar.dir"               value="${basedir}/ivy"/>
    <property name="ivy.jar.file"              value="${ivy.jar.dir}/ivy.jar"/>
    <property name="src.main.dir"              value="src/main/java"/>
    <property name="resources.main.dir"        value="src/main/resources"/>
    <property name="lib.dir"                   value="lib"/>
    <property name="build.main.dir"            value="build"/>
    <property name="target.dir"                value="target"/>
    <property name="dist.dir"                  value="dist"/>
    <property name="javadoc.dir"               value="javadoc"/>
    <property name="artifact.name"             value="mkvscanner"/>

    <path id="classpath.main">
        <fileset dir="${lib.dir}/runtime">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <available file="${ivy.jar.file}" property="ivy.installed"/>

    <target name="ivy.load-settings" depends="ivy.install">
        <ivy:settings file="ivySettings.xml"/>
    </target>

    <target name="ivy.download" unless="ivy.installed" description="downloads the ivy jar file">
        <echo message="downloading ivy..."/>
        <mkdir dir="${ivy.jar.dir}"/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="ivy.install" depends="ivy.download" description="registers the ivy antlib in ant">
        <echo message="registering ivy antlib..."/>
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="ivy.resolve.main" depends="ivy.install, ivy.load-settings" description="resolve ivy dependencies for running the server">
        <ivy:retrieve conf="runtime" pattern="${lib.dir}/[conf]/[organisation]-[artifact]-[revision].[ext]"/>
    </target>

    <target name="compile.main" depends="ivy.resolve.main" description="compile source">
        <mkdir dir="${build.main.dir}"/>
        <javac destdir="${build.main.dir}" includeantruntime="false" classpathref="classpath.main">
            <src path="${src.main.dir}"/>
        </javac>
    </target>

    <target name="copy.resources" description="copy resources to build dir">
        <copy todir="${build.main.dir}">
            <fileset dir="${resources.main.dir}"/>
        </copy>
    </target>

    <target name="create-jar.runtime" depends="compile.main, copy.resources" description="creates a jar file in the target directory">
        <mkdir dir="${target.dir}"/>
        <jar destfile="${target.dir}/${artifact.name}.jar" basedir="${build.main.dir}"/>
    </target>

    <target name="create-jar.sources">
        <jar destfile="${dist.dir}/${artifact.name}-${ivy.revision}-sources.jar">
            <fileset dir="${src.main.dir}" includes="**/*.java"/>
        </jar>
    </target>

    <target name="create-jar.javadoc">
        <javadoc sourcepath="${src.main.dir}" destdir="javadoc" classpathref="classpath.main"/>
        <jar basedir="javadoc" file="${dist.dir}/${artifact.name}-${ivy.revision}-javadoc.jar"/>
    </target>

    <target name="publish" depends="ivy.resolve.main, publish.validate, create-jar.sources, create-jar.runtime, create-jar.javadoc">
        <copy file="${target.dir}/${artifact.name}.jar" tofile="${dist.dir}/${artifact.name}-${ivy.revision}.jar"/>
        <ivy:makepom ivyfile="ivy.xml" templatefile="pomTemplate.xml" pomfile="${dist.dir}/${artifact.name}-${ivy.revision}.pom"/>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="gpg2 -a -b --yes ${dist.dir}/${artifact.name}-${ivy.revision}.jar"/>
        </exec>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="gpg2 -a -b --yes ${dist.dir}/${artifact.name}-${ivy.revision}-sources.jar"/>
        </exec>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="gpg2 -a -b --yes ${dist.dir}/${artifact.name}-${ivy.revision}-javadoc.jar"/>
        </exec>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="gpg2 -a -b --yes ${dist.dir}/${artifact.name}-${ivy.revision}.pom"/>
        </exec>
        <ivy:publish status="${publish.status}" resolver="${publish.resolver}" overwrite="true"
                     artifactspattern="${dist.dir}/[artifact]-[revision](-[classifier]).[ext]" publishivy="false"/>
    </target>

    <target name="publish.validate">
        <script language="javascript">
            var ivyVersion = project.getProperty("ivy.revision");
            var publishResolver = project.getProperty("publish.resolver");
            var errors = [];
            if (publishResolver === "nexus-staging" || publishResolver === "nexus-snapshots") {
                if (typeof project.getProperty("publish.user") !== "string") {
                    errors.push("parameter publish.user required when publishing to " + publishResolver);
                }
                if (typeof project.getProperty("publish.password") !== "string") {
                    errors.push("parameter publish.password required when publishing to " + publishResolver);
                }
            }
            if (ivyVersion.toLowerCase().endsWith("snapshot")) {
                if (publishResolver !== "nexus-snapshots" &amp;&amp; publishResolver !== "local") {
                    errors.push("parameter publish.resolver must be \"nexus-snapshots\" or \"local\" for a snapshot version: " + ivyVersion);
                }
                project.setProperty("publish.status", "snapshot");
            } else {
                if (publishResolver !== "nexus-staging" &amp;&amp; publishResolver !== "local") {
                    errors.push("parameter publish.resolver must be \"nexus-staging\" or \"local\" for a non-snapshot version: " + ivyVersion);
                }
                project.setProperty("publish.status", "release");
            }
            if (errors.length > 0) {
                project.setProperty("publish.validation-failed", true);
                project.setProperty("publish.errors", errors.join("; "));
            }
        </script>
        <fail if="publish.validation-failed" message="${publish.errors}"/>
    </target>

    <target name="clean" description="cleans all build artifacts">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${lib.dir}"/>
            <fileset dir="${build.main.dir}"/>
            <fileset dir="${target.dir}"/>
            <fileset dir="${dist.dir}"/>
            <fileset dir="${javadoc.dir}"/>
        </delete>
    </target>

    <target name="clean.ant-deps" description="clean the ivy installation">
        <delete dir="${ivy.jar.dir}"/>
    </target>

    <target name="ivy.clean-cache" depends="ivy.install" description="clean the ivy cache">
        <ivy:cleancache/>
    </target>
</project>
